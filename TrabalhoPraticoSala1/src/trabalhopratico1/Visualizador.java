package trabalhopratico1;

import java.awt.Color;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gabrielozaki
 */
public class Visualizador extends javax.swing.JFrame {

    BufferedImage imagem;
    BufferedImage original;
    Point ini;
    Point fim;
    boolean rini = true;
    boolean retaponto = false;

    /**
     * Creates new form visualizador
     */
    public Visualizador() {
        initComponents();
    }

    //Copia uma BufferedImage, evitando assim que editemos a imagem original
    //Código de referencia veio daqui:
    //http://stackoverflow.com/questions/3514158/how-do-you-clone-a-bufferedimage
    static BufferedImage clonaImagem(BufferedImage original) {
        //Pega o model das cores
        ColorModel cm = original.getColorModel();
        //Verifica se existe transparencia
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        //Copia os dados da imagem
        WritableRaster raster = original.copyData(null);
        //retorna a imagem
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImagemPanel = new javax.swing.JPanel();
        ImagemLabel = new javax.swing.JLabel();
        PosLabel = new javax.swing.JLabel();
        PontoButton = new javax.swing.JRadioButton();
        RetaButton = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        AbrirMenu = new javax.swing.JMenuItem();
        AcaoMenu = new javax.swing.JMenu();
        OriginalMenu = new javax.swing.JMenuItem();
        CinzaMenu = new javax.swing.JMenuItem();
        InverterMenu = new javax.swing.JMenuItem();
        SeparaMenu = new javax.swing.JMenu();
        VermelhoMenu = new javax.swing.JMenuItem();
        VerdeMenu = new javax.swing.JMenuItem();
        AzulMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ImagemPanel.setBackground(new java.awt.Color(200, 200, 200));
        ImagemPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ImagemPanelMouseMoved(evt);
            }
        });

        ImagemLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ImagemLabelMouseMoved(evt);
            }
        });
        ImagemLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImagemLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ImagemPanelLayout = new javax.swing.GroupLayout(ImagemPanel);
        ImagemPanel.setLayout(ImagemPanelLayout);
        ImagemPanelLayout.setHorizontalGroup(
            ImagemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImagemLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ImagemPanelLayout.setVerticalGroup(
            ImagemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImagemLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        PosLabel.setText("(0,0)");

        PontoButton.setSelected(true);
        PontoButton.setText("Ponto");
        PontoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PontoButtonActionPerformed(evt);
            }
        });

        RetaButton.setText("Reta");
        RetaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetaButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("Arquivo");

        AbrirMenu.setText("Abrir");
        AbrirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirMenuActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirMenu);

        jMenuBar1.add(jMenu1);

        AcaoMenu.setText("Ações");

        OriginalMenu.setText("Original");
        OriginalMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OriginalMenuActionPerformed(evt);
            }
        });
        AcaoMenu.add(OriginalMenu);

        CinzaMenu.setText("Obter Tons de Cinza");
        CinzaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CinzaMenuActionPerformed(evt);
            }
        });
        AcaoMenu.add(CinzaMenu);

        InverterMenu.setText("Inverter Cores");
        InverterMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InverterMenuActionPerformed(evt);
            }
        });
        AcaoMenu.add(InverterMenu);

        SeparaMenu.setText("Separar Canais");

        VermelhoMenu.setText("Apenas Canal Vemelho");
        VermelhoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VermelhoMenuActionPerformed(evt);
            }
        });
        SeparaMenu.add(VermelhoMenu);

        VerdeMenu.setText("Apenas Canal Verde");
        VerdeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerdeMenuActionPerformed(evt);
            }
        });
        SeparaMenu.add(VerdeMenu);

        AzulMenu.setText("Apenas Canal Azul");
        AzulMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AzulMenuActionPerformed(evt);
            }
        });
        SeparaMenu.add(AzulMenu);

        AcaoMenu.add(SeparaMenu);

        jMenuBar1.add(AcaoMenu);
        AcaoMenu.setVisible(false);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ImagemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PontoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RetaButton)))
                .addContainerGap(256, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(ImagemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PontoButton)
                    .addComponent(RetaButton)
                    .addComponent(PosLabel))
                .addContainerGap(298, Short.MAX_VALUE))
        );

        PosLabel.setVisible(false);
        PontoButton.setVisible(false);
        RetaButton.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AbrirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirMenuActionPerformed
        // TODO add your handling code here:
        //Foi escolhido o CTRL+O como atalho porque o CTRL+A selecionava todo texto da TextArea
        // Explorador de arquivos do Java, exemplo veio do site da oracle
        JFileChooser fc = new JFileChooser();
        //Faz ele abrir inicialmente na pasta do projeto
        fc.setCurrentDirectory(new java.io.File("."));
        //Abre o explorador
        int returnVal = fc.showOpenDialog(Visualizador.this);
        //Se foi clicado no abrir arquivo
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Pega o arquivo selecionado
            File file = fc.getSelectedFile();
            try {
                //Abre a imagem
                this.imagem = ImageIO.read(file);
                this.original = clonaImagem(this.imagem);
                //Transforma em um icon pra gente passar para o jlabel
                ImageIcon imagemIcon = new ImageIcon(this.imagem);
                //Coloca no jlabel
                this.setSize(this.imagem.getWidth() + 150, this.imagem.getHeight() + 150);
                ImagemPanel.setSize(this.imagem.getWidth(), this.imagem.getHeight());
                ImagemLabel.setSize(this.imagem.getWidth(), this.imagem.getHeight());
                ImagemLabel.setIcon(imagemIcon);
                PosLabel.setVisible(true);
                PontoButton.setVisible(true);
                RetaButton.setVisible(true);
                AcaoMenu.setVisible(true);
                //imagemPanel.setSize(imagemPanel.getWidth(), imagemPanel.getHeight());

            } catch (IOException ex) {
                Logger.getLogger(Visualizador.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_AbrirMenuActionPerformed

    private void CinzaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CinzaMenuActionPerformed
        // TODO add your handling code here:
        //Cria uma cópia da imagem
        BufferedImage cinza = this.imagem;
        //Variavel temporaria cor, vamos utilizar em todo pixel da imagem
        Color cor;

        //Variaveis para armazenar cada canal de cor
        float vermelho;
        float verde;
        float azul;
        float luminosidade;
        //Percorre na horizontal
        for (int i = 0; i < cinza.getWidth(); i++) {
            //percorre na vertical
            for (int j = 0; j < cinza.getHeight(); j++) {
                //Obtem a cor no ponto i j
                cor = new Color(cinza.getRGB(i, j));
                //Converte cada canal
                //O resultado deve ser divisivel por 255 pois o Color só aceita valores entre 0 e 1
                vermelho = (float) (cor.getRed() * 0.299) / 255;
                verde = (float) (cor.getGreen() * 0.587) / 255;
                azul = (float) (cor.getBlue() * 0.114) / 255;
                //Formula da luminosidade
                //I= 0.299R + 0.587G + 0.114B
                luminosidade = vermelho + azul + vermelho;
                cor = new Color(luminosidade, luminosidade, luminosidade);
                //pinta o pixel
                cinza.setRGB(i, j, cor.getRGB());
            }
        }

        //Insere no label
        ImageIcon imagemIcon = new ImageIcon(cinza);
        ImagemLabel.setIcon(imagemIcon);

    }//GEN-LAST:event_CinzaMenuActionPerformed

    private void InverterMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InverterMenuActionPerformed
        // TODO add your handling code here:
        //Cria uma cópia da imagem
        BufferedImage inverte = this.imagem;
        //Variavel temporaria cor, vamos utilizar em todo pixel da imagem
        Color cor;
        //Variaveis para armazenar cada canal de cor
        float vermelho;
        float verde;
        float azul;
        //Percorre na horizontal
        for (int i = 0; i < inverte.getWidth(); i++) {
            //percorre na vertical
            for (int j = 0; j < inverte.getHeight(); j++) {
                //Obtem a cor no ponto i j
                cor = new Color(inverte.getRGB(i, j));
                //Converte cada canal
                //O resultado deve ser divisivel por 255 pois o Color só aceita valores entre 0 e 1
                vermelho = (float) (255 - cor.getRed()) / 255;
                verde = (float) (255 - cor.getGreen()) / 255;
                azul = (float) (255 - cor.getBlue()) / 255;
                cor = new Color(vermelho, verde, azul);
                //pinta o pixel
                inverte.setRGB(i, j, cor.getRGB());
            }
        }

        //Insere no label
        ImageIcon imagemIcon = new ImageIcon(inverte);
        ImagemLabel.setIcon(imagemIcon);

    }//GEN-LAST:event_InverterMenuActionPerformed

    private void OriginalMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OriginalMenuActionPerformed
        // TODO add your handling code here:
        //Aqui usamos o ImagemLabel pq o panel muda de tamanho
        this.imagem = clonaImagem(original);
        ImageIcon imagemIcon = new ImageIcon(this.imagem);
        ImagemLabel.setIcon(imagemIcon);

    }//GEN-LAST:event_OriginalMenuActionPerformed

    private void VermelhoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VermelhoMenuActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //Cria uma cópia da imagem
        BufferedImage separa = this.imagem;
        //Variavel temporaria cor, vamos utilizar em todo pixel da imagem
        Color cor;
        //Variaveis para armazenar cada canal de cor
        float vermelho;

        //Percorre na horizontal
        for (int i = 0; i < separa.getWidth(); i++) {
            //percorre na vertical
            for (int j = 0; j < separa.getHeight(); j++) {
                //Obtem a cor no ponto i j
                cor = new Color(separa.getRGB(i, j));
                //Converte cada canal
                //O resultado deve ser divisivel por 255 pois o Color só aceita valores entre 0 e 1
                vermelho = (float) (cor.getRed()) / 255;
                cor = new Color(vermelho, 0, 0);
                //pinta o pixel
                separa.setRGB(i, j, cor.getRGB());
            }
        }
        //Insere no label
        ImageIcon imagemIcon = new ImageIcon(separa);
        ImagemLabel.setIcon(imagemIcon);
    }//GEN-LAST:event_VermelhoMenuActionPerformed

    private void VerdeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerdeMenuActionPerformed
        // TODO add your handling code here:
        //Cria uma cópia da imagem
        BufferedImage separa = this.imagem;
        //Variavel temporaria cor, vamos utilizar em todo pixel da imagem
        Color cor;
        //Variaveis para armazenar cada canal de cor
        float verde;

        //Percorre na horizontal
        for (int i = 0; i < separa.getWidth(); i++) {
            //percorre na vertical
            for (int j = 0; j < separa.getHeight(); j++) {
                //Obtem a cor no ponto i j
                cor = new Color(separa.getRGB(i, j));
                //Converte cada canal
                //O resultado deve ser divisivel por 255 pois o Color só aceita valores entre 0 e 1
                verde = (float) (cor.getGreen()) / 255;
                cor = new Color(0, verde, 0);
                //pinta o pixel
                separa.setRGB(i, j, cor.getRGB());
            }
        }
        //Insere no label
        ImageIcon imagemIcon = new ImageIcon(separa);
        ImagemLabel.setIcon(imagemIcon);
    }//GEN-LAST:event_VerdeMenuActionPerformed

    private void AzulMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AzulMenuActionPerformed
        // TODO add your handling code here:
        //Cria uma cópia da imagem
        BufferedImage separa = this.imagem;
        //Variavel temporaria cor, vamos utilizar em todo pixel da imagem
        Color cor;
        //Variaveis para armazenar cada canal de cor
        float azul;

        //Percorre na horizontal
        for (int i = 0; i < separa.getWidth(); i++) {
            //percorre na vertical
            for (int j = 0; j < separa.getHeight(); j++) {
                //Obtem a cor no ponto i j
                cor = new Color(separa.getRGB(i, j));
                //Converte cada canal
                //O resultado deve ser divisivel por 255 pois o Color só aceita valores entre 0 e 1
                azul = (float) (cor.getGreen()) / 255;
                cor = new Color(0, 0, azul);
                //pinta o pixel
                separa.setRGB(i, j, cor.getRGB());
            }
        }
        //Insere no label
        ImageIcon imagemIcon = new ImageIcon(separa);
        ImagemLabel.setIcon(imagemIcon);
    }//GEN-LAST:event_AzulMenuActionPerformed

    private void ImagemPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImagemPanelMouseMoved
        // TODO add your handling code here:

    }//GEN-LAST:event_ImagemPanelMouseMoved

    private void ImagemLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImagemLabelMouseClicked
        // TODO add your handling code here:
        if (retaponto == false) {
            BufferedImage areaDesenho = this.imagem;
            Point p = ImagemPanel.getMousePosition();
            int x = (int) p.getX();
            int y = (int) p.getY();

            Color cor = new Color(0, 0, 0);
            //Percorre na horizontal
            for (int i = x - 1; i <= x + 1; i++) {
                //percorre na vertical
                for (int j = y - 1; j <= y + 1; j++) {
                    //pinta o pixel
                    areaDesenho.setRGB(i, j, cor.getRGB());
                }
            }
            //Insere no label
            ImageIcon imagemIcon = new ImageIcon(areaDesenho);
            ImagemLabel.setIcon(imagemIcon);
        } else if (this.rini == true) {
            this.rini = false;
            this.ini = ImagemLabel.getMousePosition();
        } else {
            this.rini = true;
            this.fim = ImagemLabel.getMousePosition();

            BufferedImage areaDesenho = this.imagem;

            int xini, xfim, tmpx;
            int yini, yfim, tmpy;
            int tmp;
            // double teta;
            double deltax, deltay;
            double erro = -1.0;
            double deltaerr;
            double angulo;

            Color cor = new Color(0, 0, 0);

            xini = (int) (this.ini.getX());
            yini = (int) (this.ini.getY());
            xfim = (int) (this.fim.getX());
            yfim = (int) (this.fim.getY());

            /*            for (int i = 0; i <= 1000; i++) {
                //Desenha reta usando a formula parametrica 
                teta = i * 0.001;
                tmpx = (int) ((teta * xini) + ((1 - teta) * xfim));
                tmpy = (int) ((teta * yini) + ((1 - teta) * yfim));

                areaDesenho.setRGB(tmpx, tmpy, cor.getRGB());

            }
             */
            //Bresenham
            //Considerando um circulo trigonometrico invertido(o java mapeia a imagem de baixo pra cima, então o algoritmo funciona de 315 a 360 graus
           // System.out.println(getAngulo(xini, yini, xfim, yfim));
            angulo = getAngulo(xini, yini, xfim, yfim);
            /*
             Octants:
             \5|6/
             4\|/7
            ---+---
             3/|\0
             /2|1\
            
             */
            if (angulo > 315 && angulo <= 360) {
                //quadratne 0
                deltax = xfim - xini;
                deltay = yfim - yini;

                if (deltax != 0) {
                    deltaerr = Math.abs(deltay / deltax);
                } else {
                    deltaerr = Math.abs(deltay / (deltax + 1));
                }

                tmpy = yini;
                for (tmpx = xini; tmpx < xfim - 1; tmpx++) {
                    areaDesenho.setRGB(tmpx, tmpy, cor.getRGB());
                    erro = erro + deltaerr;
                    if (erro >= 0.0) {
                        tmpy++;
                        erro = erro - 1.0;
                    }
                }
            } else if (angulo > 270 && angulo <= 315) {
                //Quadrante 1
                //Será necessário inverter algumas veriaveis para que a linha base seja o eixo y e o algoritmo funcione
                deltax = xfim - xini;

                deltay = yfim - yini;

                //inverte a divisao
                if (deltay != 0) {
                    deltaerr = Math.abs(deltax / deltay);
                } else {
                    deltaerr = Math.abs(deltax / (deltay + 1));
                }
                System.out.println("deltaerr" + deltaerr);
                //invertemos aqui o tmpx e o tmp y
                tmpx = xini;
                for (tmpy = yini; tmpy < yfim - 1; tmpy++) {
                    areaDesenho.setRGB(tmpx, tmpy, cor.getRGB());
                    erro = erro + deltaerr;
                    if (erro >= 0.0) {
                        tmpx++;
                        erro = erro - 1.0;
                    }
                }

            } else if (angulo > 225 && angulo <= 270) {
                //Quadrantre 2
                //Será necessário inverter algumas veriaveis para que a linha base seja o eixo y e o algoritmo funcione

                deltax = xini - xfim;

                deltay = yfim - yini;

                //inverte a divisao
                if (deltay != 0) {
                    deltaerr = Math.abs(deltax / deltay);
                } else {
                    deltaerr = Math.abs(deltax / (deltay + 1));
                }
                System.out.println("deltaerr" + deltaerr);
                //invertemos aqui o tmpx e o tmp y
                tmpx = xini;
                for (tmpy = yini; tmpy < yfim - 1; tmpy++) {
                    areaDesenho.setRGB(tmpx, tmpy, cor.getRGB());
                    erro = erro + deltaerr;
                    if (erro >= 0.0) {
                        tmpx--;
                        erro = erro - 1.0;
                    }
                }

            } else if (angulo > 180 && angulo <= 225) {

            } else if (angulo > 135 && angulo <= 180) {

            } else if (angulo > 90 && angulo <= 135) {

            } else if (angulo > 45 && angulo <= 90) {

            } else {

            }

            //Insere no label
            ImageIcon imagemIcon = new ImageIcon(areaDesenho);
            ImagemLabel.setIcon(imagemIcon);

        }


    }//GEN-LAST:event_ImagemLabelMouseClicked

    private void ImagemLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImagemLabelMouseMoved
        // TODO add your handling code here:
        Point p = ImagemLabel.getMousePosition();
        PosLabel.setText("(" + Math.round(p.getX()) + "," + Math.round(p.getY()) + ")");
    }//GEN-LAST:event_ImagemLabelMouseMoved

    private void PontoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PontoButtonActionPerformed
        // TODO add your handling code here:
        this.retaponto = false;
        RetaButton.setSelected(false);
    }//GEN-LAST:event_PontoButtonActionPerformed

    private void RetaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetaButtonActionPerformed
        // TODO add your handling code here:
        this.retaponto = true;
        PontoButton.setSelected(false);
    }//GEN-LAST:event_RetaButtonActionPerformed

    private static double getAngulo(int x1, int y1, int x2, int y2) {
        double angulo = Math.atan2((x2 - x1), (y2 - y1)) * 180 / Math.PI;
        angulo -= 90;
        if (angulo < 0) {
            return (360 + angulo);
        } else {
            return (angulo);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Visualizador().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirMenu;
    private javax.swing.JMenu AcaoMenu;
    private javax.swing.JMenuItem AzulMenu;
    private javax.swing.JMenuItem CinzaMenu;
    private javax.swing.JLabel ImagemLabel;
    private javax.swing.JPanel ImagemPanel;
    private javax.swing.JMenuItem InverterMenu;
    private javax.swing.JMenuItem OriginalMenu;
    private javax.swing.JRadioButton PontoButton;
    private javax.swing.JLabel PosLabel;
    private javax.swing.JRadioButton RetaButton;
    private javax.swing.JMenu SeparaMenu;
    private javax.swing.JMenuItem VerdeMenu;
    private javax.swing.JMenuItem VermelhoMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
